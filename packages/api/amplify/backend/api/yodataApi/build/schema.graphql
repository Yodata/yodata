type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createNamespace(input: CreateNamespaceInput!): Namespace
  updateNamespace(input: UpdateNamespaceInput!): Namespace
  deleteNamespace(input: DeleteNamespaceInput!): Namespace
  createType(input: CreateTypeInput!): Type
  updateType(input: UpdateTypeInput!): Type
  deleteType(input: DeleteTypeInput!): Type
  createProperty(input: CreatePropertyInput!): Property
  updateProperty(input: UpdatePropertyInput!): Property
  deleteProperty(input: DeletePropertyInput!): Property
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getNamespace(id: ID!): Namespace
  listNamespaces(filter: ModelNamespaceFilterInput, limit: Int, nextToken: String): ModelNamespaceConnection
  getType(id: ID!): Type
  listTypes(filter: ModelTypeFilterInput, limit: Int, nextToken: String): ModelTypeConnection
  getProperty(id: ID!): Property
  listPropertys(filter: ModelPropertyFilterInput, limit: Int, nextToken: String): ModelPropertyConnection
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateNamespace: Namespace @aws_subscribe(mutations: ["createNamespace"])
  onUpdateNamespace: Namespace @aws_subscribe(mutations: ["updateNamespace"])
  onDeleteNamespace: Namespace @aws_subscribe(mutations: ["deleteNamespace"])
  onCreateType: Type @aws_subscribe(mutations: ["createType"])
  onUpdateType: Type @aws_subscribe(mutations: ["updateType"])
  onDeleteType: Type @aws_subscribe(mutations: ["deleteType"])
  onCreateProperty: Property @aws_subscribe(mutations: ["createProperty"])
  onUpdateProperty: Property @aws_subscribe(mutations: ["updateProperty"])
  onDeleteProperty: Property @aws_subscribe(mutations: ["deleteProperty"])
}

type User {
  id: ID!
  name: String
  email: [String]
  telephone: [TelephoneNumber]
  url: [URI]
  prefix: [String]
  image: [URI]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  email: ModelStringFilterInput
  prefix: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  name: String
  email: [String]
  prefix: [String]
}

input UpdateUserInput {
  id: ID!
  name: String
  email: [String]
  prefix: [String]
}

input DeleteUserInput {
  id: ID
}

type Namespace {
  id: ID!
  name: String!
  creator: [URI]
  contributor: [URI]
}

type ModelNamespaceConnection {
  items: [Namespace]
  nextToken: String
}

input ModelNamespaceFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelNamespaceFilterInput]
  or: [ModelNamespaceFilterInput]
  not: ModelNamespaceFilterInput
}

input CreateNamespaceInput {
  name: String!
}

input UpdateNamespaceInput {
  id: ID!
  name: String
}

input DeleteNamespaceInput {
  id: ID
}

type Type {
  id: ID!
  name: String!
  label: [Literal]
  domain: [URI]
}

type ModelTypeConnection {
  items: [Type]
  nextToken: String
}

input ModelTypeFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelTypeFilterInput]
  or: [ModelTypeFilterInput]
  not: ModelTypeFilterInput
}

input CreateTypeInput {
  name: String!
}

input UpdateTypeInput {
  id: ID!
  name: String
}

input DeleteTypeInput {
  id: ID
}

type Property {
  id: ID!
  name: String
  domain: [URI]
  range: [URI]
  label: [Literal]
  exampleValue: [Literal]
}

type ModelPropertyConnection {
  items: [Property]
  nextToken: String
}

input ModelPropertyFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelPropertyFilterInput]
  or: [ModelPropertyFilterInput]
  not: ModelPropertyFilterInput
}

input CreatePropertyInput {
  name: String
}

input UpdatePropertyInput {
  id: ID!
  name: String
}

input DeletePropertyInput {
  id: ID
}

scalar URI

scalar Date

scalar EmailAddress

scalar TelephoneNumber

type Literal {
  termType: String!
  dataType: String
  language: String
  value: String!
}

type NamedNode {
  termType: String!
  value: String
}
